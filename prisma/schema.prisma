// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                  String   @id @default(cuid())
  name                String?
  email               String   @unique
  emailVerified       DateTime?
  isEmailVerified     Boolean  @default(false)

  password            String  // bcrypt hash for credentials login

  role                Role     @default(USER)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  accounts            Account[]
  sessions            Session[]
  refreshTokens       RefreshToken[]
  emailVerificationTokens EmailVerificationToken[]
  transcripts         Transcript[]
}

model EmailVerificationToken {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailVerifyToken String @unique
  expires       DateTime
  createdAt     DateTime @default(now())
}

// Stores refresh tokens (hashed) for rotation/revocation.
model RefreshToken {
  id                  String    @id @default(cuid())
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  tokenHash           String    @unique // sha256(token)
  expiresAt           DateTime
  revokedAt           DateTime?
  replacedByTokenHash String?
  userAgent           String?
  ip                  String?

  createdAt           DateTime  @default(now())

  @@index([userId])
}

// Transcript model for the dashboard and analytics.
model Transcript {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  title          String?
  sourceUrl      String?
  sourceTabTitle String?
  durationMs     Int?
  chunkCount     Int       @default(0)

  contentJson    Json?

  createdAt      DateTime  @default(now())

  @@index([userId, createdAt])
}

/* ---------- NextAuth standard models (required by PrismaAdapter) ---------- */

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
